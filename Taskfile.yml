version: '3'

tasks:

  networks-create:
    internal: true
    silent: true
    cmds:
      - |
        echo "[INFO] creating docker networks"
        declare -A networks
        networks=(
          ["ministack-global"]="10.1.0.0/24 ministack"
          ["ministack-nomad"]="10.2.0.0/24 nomad"
          ["ministack-consul"]="10.3.0.0/24 consul"
          ["ministack-vault"]="10.4.0.0/24 vault"
        )
        network_exists() {
          local network_name=$1
          docker network ls --filter name=^${network_name}$ --format "{{.Name}}" | grep -wq "${network_name}"
        }
        for network in "${!networks[@]}"; do
          IFS=' ' read -r subnet iface_prefix <<< "${networks[$network]}"
          if network_exists "$network"; then
            echo "[WARN] network '$network' already exists. Skipping creation"
          else
            echo "[INFO] creating network '$network'..."
            docker network create \
              --driver=bridge \
              --subnet="$subnet" \
              --opt "com.docker.network.container_iface_prefix=$iface_prefix" \
              "$network"
            if [[ $? -eq 0 ]]; then
              echo "[INFO] network '$network' created successfully"
            else
              echo "[ERROR] failed to create network '$network'"
              exit 1
            fi
          fi
        done

  templates-generate:
    internal: true
    silent: true
    cmds:
      - |
        echo "[INFO] generating docker compose files"
        if [[ ! -f "build" ]]; then
          rm -rf build
        fi
        echo "[INFO] config file to use: {{.CONFIG_FILE}}"
        gomplate --input-dir=templates --output-dir=build --datasource config={{.CONFIG_FILE}}

  services-start:
    internal: true
    silent: true
    cmds:
      - |
        echo "[INFO] starting docker compose services"
        docker compose --file build/cluster.yaml up -d
        containers=$(docker ps --filter "label=ministack.enable=true" --format "{{ `{{.Names}}` }}")
        if [[ -z "$containers" ]]; then
          echo "[WARN] no running containers with label 'ministack.enable=true' found"
          exit 0
        fi
        for container in $containers; do
          echo "[INFO] executing 'start-ministack' on container: $container"
          docker exec -it "$container" start-ministack
          if [[ $? -ne 0 ]]; then
            echo "[ERROR] failed to execute command on container: $container"
          fi
        done

  services-stop:
    internal: true
    silent: true
    cmds:
      - |
        docker compose --file build/cluster.yaml down

  ministack-dry-run:
    cmds:
      - task: templates-generate
        vars:
          CONFIG_FILE: '{{.CLI_ARGS}}'

  ministack-start:
    cmds:
      - task: networks-create
      - task: templates-generate
        vars:
          CONFIG_FILE: '{{.CLI_ARGS}}'
      - task: services-start

  ministack-stop:
    cmds:
      - task: templates-generate
        vars:
          CONFIG_FILE: '{{.CLI_ARGS}}'
      - task: services-stop
