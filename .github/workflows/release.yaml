name: Build and Release binary

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        target: [x86_64-unknown-linux-gnu, x86_64-apple-darwin]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: ministack-linux
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: ministack-macos
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: '1.84.0'
          override: true
          target: ${{ matrix.target }}
      - name: Build the project in release mode
        run: cargo build --release --target ${{ matrix.target }}
      - name: Check if release exists
        id: check_release
        run: |
          RELEASE_URL=$(curl -s -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} \
            | jq -r '.url')
          if [ -z "$RELEASE_URL" ]; then
            echo "Release does not exist"
            echo "::set-output name=release_exists::false"
          else
            echo "Release exists at $RELEASE_URL"
            echo "::set-output name=release_exists::true"
            echo "::set-output name=release_url::$RELEASE_URL"
          fi
      - name: Create Release
        if: steps.check_release.outputs.release_exists == 'false'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload binary to assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url || steps.check_release.outputs.release_url }}
          asset_path: ./target/${{ matrix.target }}/release/ministack
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: application/octet-stream
